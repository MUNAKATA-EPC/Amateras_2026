Title:Main - [ RobotChallenge Unit2 Prongram include Camera  ] DAISEN C-Style for TJ3B  [ Ver.20190706 ]
CN01:Ball
CN02:Line
CN03:L-Touch
CN04:R-Touch
CN05:C-Touch
CN06:
CN07:
CN08:
CN09:RED3
CN10:RED2
[0000]:sno:08,cno:07,val:111111-110010-010002,cmt:
[0001]:sno:33,cno:33,val:000000-000000-000000,cmt:double IR_motermax = 40;  	// 回り込む際のモータの最大出力結果
[0002]:sno:33,cno:33,val:000000-000000-000000,cmt:double IR_frontValue = 15;  	// 前とみなす、角度の範囲（IR）
[0003]:sno:33,cno:33,val:000000-000000-000000,cmt:double IR_front_number = 1.5;  	// ボールが前に近しいところにいるときの角度を微調整
[0004]:sno:33,cno:33,val:000000-000000-000000,cmt:double IR_edge_move = 0;  	// IRの角度
[0005]:sno:33,cno:33,val:000000-000000-000000,cmt:double IR_edge_true = 0;  	// IRの角度
[0006]:sno:33,cno:33,val:000000-000000-000000,cmt:double IR_edgeAdjust = 0;  	// IRの角度の調整用　０〜３６０にする用
[0007]:sno:33,cno:33,val:000000-000000-000000,cmt:double IR_edgeCentralValue = 0;  	// IRの角度の調整用　０〜３６０にする用
[0008]:sno:33,cno:33,val:000000-000000-000000,cmt:double IR_alpha_max = 70;  	// 回り込む際のボールに対して何度ずらして動くか（max）
[0009]:sno:33,cno:33,val:000000-000000-000000,cmt:double IR_alpha_min = 60;  	// 回り込む際のボールに対して何度ずらして動くか（min）
[0010]:sno:33,cno:33,val:000000-000000-000000,cmt:double IR_alpha = 0;  	// 回り込む際のボールに対して何度ずらして動くか（結果）
[0011]:sno:33,cno:33,val:000000-000000-000000,cmt:double Gyro_moter_max = 15;  	// ジャイロのモータの最大出力結果
[0012]:sno:33,cno:33,val:000000-000000-000000,cmt:double Gyro_moter_min = 10;  	// ジャイロのモータの最大出力結果
[0013]:sno:33,cno:33,val:000000-000000-000000,cmt:double Gyro_frontValue = 1;  	// 前とみなす、角度の範囲（Gyro）
[0014]:sno:33,cno:33,val:000000-000000-000000,cmt:double Gyro_edge = 0;  	// ジャイロの角度
[0015]:sno:33,cno:33,val:000000-000000-000000,cmt:double Camera_xx;
[0016]:sno:33,cno:33,val:000000-000000-000000,cmt:double Camera_yy;
[0017]:sno:33,cno:33,val:000000-000000-000000,cmt:double Camera_motermax = 15;
[0018]:sno:33,cno:33,val:000000-000000-000000,cmt:double Line_time = 400;  	// ラインを踏んでから何秒以上たっていたらブレーキするか
[0019]:sno:33,cno:33,val:000000-000000-000000,cmt:double Line_timer = 0;  	// ライン制御で使うタイマー
[0020]:sno:33,cno:33,val:000000-000000-000000,cmt:double Line_timerAdd = Line_time;  	// ラインセンサーで使うタイマーの付属品
[0021]:sno:33,cno:33,val:000000-000000-000000,cmt:double Line_edge = 0;  	// LINEの角度
[0022]:sno:33,cno:33,val:000000-000000-000000,cmt:double xx = 0;  	// 最終のモータ出力（X座標）
[0023]:sno:33,cno:33,val:000000-000000-000000,cmt:double yy = 0;  	// 最終のモータ出力（Y座標）
[0024]:sno:30,cno:30,val:000000-000000-000000,cmt:
[0025]:sno:09,cno:09,val:000001-000000-000000,cmt:NewFile-02
[0026]:sno:04,cno:01,val:000000-000000-000000,cmt:
[0027]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_timer = gT[T1] + Line_timerAdd;  	// ラインタイマーの計算
[0028]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_I] = (gAD[CN1] - IR_edgeAdjust - (IR_edgeCentralValue - IR_edgeAdjust)) + 360;  	// IR角度の調整
[0029]:sno:31,cno:31,val:080095-000360-000000,cmt:IR角度　３６０に収める
[0030]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_edge_true = gV[VAR_I] * 1.1;  	// IR角度を読む　　度数のまま
[0031]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_I] = (gAD[CN1] - IR_edgeAdjust) + 360 - 45;  	// IR角度の調整
[0032]:sno:31,cno:31,val:080095-000360-000000,cmt:IR角度　３６０に収める
[0033]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_edge_move = gV[VAR_I] * 3.14 / 180 * 1.1;  	// IR角度を読む　　ラジアンに直す
[0034]:sno:33,cno:33,val:000000-000000-000000,cmt:Gyro_edge = gAD[CN3] * 1.1;  	// ジャイロを読む
[0035]:sno:33,cno:33,val:000000-000000-000000,cmt:i2c_get_pixy();
[0036]:sno:33,cno:33,val:000000-000000-000000,cmt:Camera_xx = get_pixydat_x(1);
[0037]:sno:33,cno:33,val:000000-000000-000000,cmt:Camera_yy = get_pixydat_y(1);
[0038]:sno:33,cno:33,val:000000-000000-000000,cmt:Gyro_edge = gAD[CN3] * 1.1;  	// ジャイロを読む
[0039]:sno:31,cno:31,val:110341-000180-000000,cmt:ラインを読む（ラインをよける方向に調節）
[0040]:sno:31,cno:31,val:110125-000360-000000,cmt:ラインを読む（ラインをよける方向に調節）
[0041]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_edge = gV[VAR_L] * 3.14 / 180 * 1.1;  	// LINEを読む　　ラジアンに直す
[0042]:sno:01,cno:33,val:000000-000000-000000,cmt:gAD[CN4] < 400  	// LINEが反応した時、ラインを踏んでからLine_time以上経っていたら
[0043]:sno:21,cno:21,val:000050-000050-000000,cmt:ブザーをやませる
[0044]:sno:01,cno:33,val:000000-000000-000000,cmt:Line_timer > Line_time  	// Line_number以上経っていたら、ブレーキ
[0045]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_timerAdd = 0;  	// ラインタイマー付属品の調整
[0046]:sno:38,cno:38,val:200200-200200-999999,cmt:
[0047]:sno:30,cno:30,val:000000-000000-000000,cmt:
[0048]:sno:00,cno:02,val:000000-000000-000000,cmt:
[0049]:sno:33,cno:33,val:000000-000000-000000,cmt:xx = cos(Line_edge) * IR_motermax;  	// LINEから離れるには、、（X座標）
[0050]:sno:33,cno:33,val:000000-000000-000000,cmt:yy = sin(Line_edge) * IR_motermax;  	// LINEから離れるには、、（Y座標）
[0051]:sno:02,cno:33,val:000000-000000-000000,cmt:Gyro_edge > 50  &&  Gyro_edge < 310
[0052]:sno:22,cno:22,val:-00050--00050-000000,cmt:ブザーをやませる
[0053]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_timerAdd = Line_time;  	// ラインタイマー付属品の調整
[0054]:sno:33,cno:33,val:000000-000000-000000,cmt:xx = 0;  	// 0
[0055]:sno:33,cno:33,val:000000-000000-000000,cmt:yy = 0;  	// 0
[0056]:sno:02,cno:33,val:000000-000000-000000,cmt:gAD[CN2] == 500  	// ボールが遠くにある時
[0057]:sno:22,cno:22,val:-00050--00050-000000,cmt:ブザーをやませる
[0058]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_timerAdd = Line_time;  	// ラインタイマー付属品の調整
[0059]:sno:33,cno:33,val:000000-000000-000000,cmt:xx = cos(IR_edge_move) * IR_motermax;  	// ボールのほうに行くには、、（X座標）
[0060]:sno:33,cno:33,val:000000-000000-000000,cmt:yy = sin(IR_edge_move) * IR_motermax;  	// ボールのほうに行くには、、（Y座標）
[0061]:sno:02,cno:33,val:000000-000000-000000,cmt:IR_edge_true < IR_frontValue * IR_front_number  ||  IR_edge_true  > (360 - IR_frontValue) * IR_front_number  	// ボールが前に近しい所にある時
[0062]:sno:22,cno:22,val:-00050--00050-000000,cmt:ブザーをやませる
[0063]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_timerAdd = Line_time;  	// ラインタイマー付属品の調整
[0064]:sno:01,cno:33,val:000000-000000-000000,cmt:IR_edge_true < IR_frontValue  ||  IR_edge_true  > 360 - IR_frontValue  	// ボールがない時
[0065]:sno:33,cno:33,val:000000-000000-000000,cmt:xx = IR_motermax;  	// 直進のためには、、（X座標）
[0066]:sno:33,cno:33,val:000000-000000-000000,cmt:yy = - IR_motermax;  	// 直進のためには、、（Y座標）
[0067]:sno:03,cno:00,val:000000-000000-000000,cmt:
[0068]:sno:33,cno:33,val:000000-000000-000000,cmt:xx = cos(IR_edge_move) * IR_motermax;  	// ボールのほうに行くには、、（X座標）
[0069]:sno:33,cno:33,val:000000-000000-000000,cmt:yy = sin(IR_edge_move) * IR_motermax;  	// ボールのほうに行くには、、（Y座標）
[0070]:sno:00,cno:02,val:000000-000000-000000,cmt:
[0071]:sno:03,cno:00,val:000000-000000-000000,cmt:
[0072]:sno:22,cno:22,val:-00050--00050-000000,cmt:ブザーをやませる
[0073]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_timerAdd = Line_time;  	// ラインタイマー付属品の調整
[0074]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_alpha = ( (IR_alpha_min - IR_alpha_max) / 32400 ) * IR_edge_true * IR_edge_true;
[0075]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_alpha = IR_alpha - (IR_alpha_min - IR_alpha_max) / 90 * IR_edge_true + IR_alpha_min;
[0076]:sno:01,cno:33,val:000000-000000-000000,cmt:IR_edge_true < 180  	// 左にボールがある
[0077]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_edge_move += IR_alpha * 3.14 / 180;  	// IR＿alphaだけずらす
[0078]:sno:03,cno:00,val:000000-000000-000000,cmt:
[0079]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_edge_move -= IR_alpha * 3.14 / 180;  	// -IR＿alphaだけずらす
[0080]:sno:00,cno:02,val:000000-000000-000000,cmt:
[0081]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_edge_move= IR_edge_move * 180 / 3.14 + 360;
[0082]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_J] = IR_edge_move;  	// ０〜３６０度に直す作業
[0083]:sno:31,cno:31,val:090105-000360-000000,cmt:０〜３６０度に直す作業
[0084]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_edge_move = gV[VAR_J] * 3.14 / 180;  	// ０〜３６０度に直す作業
[0085]:sno:33,cno:33,val:000000-000000-000000,cmt:xx = cos(IR_edge_move) * IR_motermax;  	// 回り込むには、、（X座標）
[0086]:sno:33,cno:33,val:000000-000000-000000,cmt:yy = sin(IR_edge_move) * IR_motermax;  	// 回り込むには、、（Y座標）
[0087]:sno:00,cno:02,val:000000-000000-000000,cmt:
[0088]:sno:01,cno:33,val:000000-000000-000000,cmt:get_pixydat_index(1) == 0
[0089]:sno:01,cno:33,val:000000-000000-000000,cmt:Gyro_edge < Gyro_frontValue  	// 前にロボットが向いている時
[0090]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = 0;
[0091]:sno:02,cno:33,val:000000-000000-000000,cmt:Gyro_edge > 360 - Gyro_frontValue  	// 前にロボットが向いている時
[0092]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = 0;
[0093]:sno:02,cno:33,val:000000-000000-000000,cmt:Gyro_edge < 180
[0094]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = ( (Gyro_moter_min - Gyro_moter_max) / 32400 ) * Gyro_edge * Gyro_edge;
[0095]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = gV[VAR_G] - (Gyro_moter_min - Gyro_moter_max) / 90 * Gyro_edge + Gyro_moter_min;
[0096]:sno:03,cno:00,val:000000-000000-000000,cmt:
[0097]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = ( (Gyro_moter_min - Gyro_moter_max) / 32400 ) * Gyro_edge * Gyro_edge;
[0098]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = gV[VAR_G] - (Gyro_moter_min - Gyro_moter_max) / 90 * Gyro_edge + Gyro_moter_min;
[0099]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = - gV[VAR_G];
[0100]:sno:00,cno:02,val:000000-000000-000000,cmt:
[0101]:sno:02,cno:33,val:000000-000000-000000,cmt:Camera_xx < 160
[0102]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = Camera_motermax / 25600 * Camera_xx * Camera_xx - Camera_motermax / 80 * Camera_xx + Camera_motermax;
[0103]:sno:03,cno:00,val:000000-000000-000000,cmt:
[0104]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = - Camera_motermax / 25600 * Camera_xx * Camera_xx + Camera_motermax / 80 * Camera_xx - Camera_motermax;
[0105]:sno:00,cno:02,val:000000-000000-000000,cmt:
[0106]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_A] =  yy + gV[VAR_G];  	// 代入
[0107]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_B] = xx + gV[VAR_G];  	// 代入
[0108]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_C] =  - xx + gV[VAR_G];  	// 代入
[0109]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_D] =  -yy + gV[VAR_G];  	// 代入
[0110]:sno:38,cno:38,val:400401-402403-999999,cmt:
[0111]:sno:00,cno:03,val:000000-000000-000000,cmt:
[0112]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_I] = (gAD[CN1] - IR_edgeAdjust - (IR_edgeCentralValue - IR_edgeAdjust)) + 360;  	// IR角度の調整
[0113]:sno:31,cno:31,val:080095-000360-000000,cmt:IR角度　３６０に収める
[0114]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_edge_true = gV[VAR_I] * 1.1;  	// IR角度を読む　　度数のまま
[0115]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_I] = (gAD[CN1] - IR_edgeAdjust) + 360 - 45;  	// IR角度の調整
[0116]:sno:31,cno:31,val:080095-000360-000000,cmt:IR角度　３６０に収める
[0117]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_edge_move = gV[VAR_I] * 3.14 / 180 * 1.1;  	// IR角度を読む　　ラジアンに直す
[0118]:sno:33,cno:33,val:000000-000000-000000,cmt:Gyro_edge = gAD[CN3] * 1.1;  	// ジャイロを読む
[0119]:sno:31,cno:31,val:110341-000180-000000,cmt:ラインを読む（ラインをよける方向に調節）
[0120]:sno:31,cno:31,val:110125-000360-000000,cmt:ラインを読む（ラインをよける方向に調節）
[0121]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_edge = gV[VAR_L] * 3.14 / 180 * 1.1;  	// LINEを読む　　ラジアンに直す
[0122]:sno:01,cno:33,val:000000-000000-000000,cmt:gAD[CN4] < 400  	// LINEが反応した時、ラインを踏んでからLine_time以上経っていたら
[0123]:sno:21,cno:21,val:000050-000050-000000,cmt:ブザーをやませる
[0124]:sno:01,cno:33,val:000000-000000-000000,cmt:Line_timer > Line_time  	// Line_number以上経っていたら、ブレーキ
[0125]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_timerAdd = 0;  	// ラインタイマー付属品の調整
[0126]:sno:38,cno:38,val:200200-200200-999999,cmt:
[0127]:sno:30,cno:30,val:000000-000000-000000,cmt:
[0128]:sno:00,cno:02,val:000000-000000-000000,cmt:
[0129]:sno:33,cno:33,val:000000-000000-000000,cmt:xx = cos(Line_edge) * IR_motermax;  	// LINEから離れるには、、（X座標）
[0130]:sno:33,cno:33,val:000000-000000-000000,cmt:yy = sin(Line_edge) * IR_motermax;  	// LINEから離れるには、、（Y座標）
[0131]:sno:02,cno:33,val:000000-000000-000000,cmt:Gyro_edge > 50  &&  Gyro_edge < 310
[0132]:sno:22,cno:22,val:-00050--00050-000000,cmt:ブザーをやませる
[0133]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_timerAdd = Line_time;  	// ラインタイマー付属品の調整
[0134]:sno:33,cno:33,val:000000-000000-000000,cmt:xx = 0;  	// 0
[0135]:sno:33,cno:33,val:000000-000000-000000,cmt:yy = 0;  	// 0
[0136]:sno:02,cno:33,val:000000-000000-000000,cmt:gAD[CN2] == 500  	// ボールが遠くにある時
[0137]:sno:22,cno:22,val:-00050--00050-000000,cmt:ブザーをやませる
[0138]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_timerAdd = Line_time;  	// ラインタイマー付属品の調整
[0139]:sno:33,cno:33,val:000000-000000-000000,cmt:xx = cos(IR_edge_move) * IR_motermax;  	// ボールのほうに行くには、、（X座標）
[0140]:sno:33,cno:33,val:000000-000000-000000,cmt:yy = sin(IR_edge_move) * IR_motermax;  	// ボールのほうに行くには、、（Y座標）
[0141]:sno:02,cno:33,val:000000-000000-000000,cmt:IR_edge_true < IR_frontValue * IR_front_number  ||  IR_edge_true  > (360 - IR_frontValue) * IR_front_number  	// ボールが前に近しい所にある時
[0142]:sno:22,cno:22,val:-00050--00050-000000,cmt:ブザーをやませる
[0143]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_timerAdd = Line_time;  	// ラインタイマー付属品の調整
[0144]:sno:01,cno:33,val:000000-000000-000000,cmt:IR_edge_true < IR_frontValue  ||  IR_edge_true  > 360 - IR_frontValue  	// ボールがない時
[0145]:sno:33,cno:33,val:000000-000000-000000,cmt:xx = IR_motermax;  	// 直進のためには、、（X座標）
[0146]:sno:33,cno:33,val:000000-000000-000000,cmt:yy = - IR_motermax;  	// 直進のためには、、（Y座標）
[0147]:sno:03,cno:00,val:000000-000000-000000,cmt:
[0148]:sno:33,cno:33,val:000000-000000-000000,cmt:xx = cos(IR_edge_move) * IR_motermax;  	// ボールのほうに行くには、、（X座標）
[0149]:sno:33,cno:33,val:000000-000000-000000,cmt:yy = sin(IR_edge_move) * IR_motermax;  	// ボールのほうに行くには、、（Y座標）
[0150]:sno:00,cno:02,val:000000-000000-000000,cmt:
[0151]:sno:03,cno:00,val:000000-000000-000000,cmt:
[0152]:sno:22,cno:22,val:-00050--00050-000000,cmt:ブザーをやませる
[0153]:sno:33,cno:33,val:000000-000000-000000,cmt:Line_timerAdd = Line_time;  	// ラインタイマー付属品の調整
[0154]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_alpha = ( (IR_alpha_min - IR_alpha_max) / 32400 ) * IR_edge_true * IR_edge_true;
[0155]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_alpha = IR_alpha - (IR_alpha_min - IR_alpha_max) / 90 * IR_edge_true + IR_alpha_min;
[0156]:sno:01,cno:33,val:000000-000000-000000,cmt:IR_edge_true < 180  	// 左にボールがある
[0157]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_edge_move += IR_alpha * 3.14 / 180;  	// IR＿alphaだけずらす
[0158]:sno:03,cno:00,val:000000-000000-000000,cmt:
[0159]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_edge_move -= IR_alpha * 3.14 / 180;  	// -IR＿alphaだけずらす
[0160]:sno:00,cno:02,val:000000-000000-000000,cmt:
[0161]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_edge_move= IR_edge_move * 180 / 3.14 + 360;
[0162]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_J] = IR_edge_move;  	// ０〜３６０度に直す作業
[0163]:sno:31,cno:31,val:090105-000360-000000,cmt:０〜３６０度に直す作業
[0164]:sno:33,cno:33,val:000000-000000-000000,cmt:IR_edge_move = gV[VAR_J] * 3.14 / 180;  	// ０〜３６０度に直す作業
[0165]:sno:33,cno:33,val:000000-000000-000000,cmt:xx = cos(IR_edge_move) * IR_motermax;  	// 回り込むには、、（X座標）
[0166]:sno:33,cno:33,val:000000-000000-000000,cmt:yy = sin(IR_edge_move) * IR_motermax;  	// 回り込むには、、（Y座標）
[0167]:sno:00,cno:02,val:000000-000000-000000,cmt:
[0168]:sno:01,cno:33,val:000000-000000-000000,cmt:Gyro_edge < Gyro_frontValue  	// 前にロボットが向いている時
[0169]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = 0;
[0170]:sno:02,cno:33,val:000000-000000-000000,cmt:Gyro_edge > 360 - Gyro_frontValue  	// 前にロボットが向いている時
[0171]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = 0;
[0172]:sno:02,cno:33,val:000000-000000-000000,cmt:Gyro_edge < 180
[0173]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = ( (Gyro_moter_min - Gyro_moter_max) / 32400 ) * Gyro_edge * Gyro_edge;
[0174]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = gV[VAR_G] - (Gyro_moter_min - Gyro_moter_max) / 90 * Gyro_edge + Gyro_moter_min;
[0175]:sno:03,cno:00,val:000000-000000-000000,cmt:
[0176]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = ( (Gyro_moter_min - Gyro_moter_max) / 32400 ) * Gyro_edge * Gyro_edge;
[0177]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = gV[VAR_G] - (Gyro_moter_min - Gyro_moter_max) / 90 * Gyro_edge + Gyro_moter_min;
[0178]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_G] = - gV[VAR_G];
[0179]:sno:00,cno:02,val:000000-000000-000000,cmt:
[0180]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_A] =  yy + gV[VAR_G];  	// 代入
[0181]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_B] = xx + gV[VAR_G];  	// 代入
[0182]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_C] =  - xx + gV[VAR_G];  	// 代入
[0183]:sno:33,cno:33,val:000000-000000-000000,cmt:gV[VAR_D] =  -yy + gV[VAR_G];  	// 代入
[0184]:sno:38,cno:38,val:400401-402403-999999,cmt:
[0185]:sno:00,cno:03,val:000000-000000-000000,cmt:
